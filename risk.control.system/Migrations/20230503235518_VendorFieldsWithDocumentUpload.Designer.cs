// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using risk.control.system.Data;

#nullable disable

namespace risk.control.system.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230503235518_VendorFieldsWithDocumentUpload")]
    partial class VendorFieldsWithDocumentUpload
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("risk.control.system.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("risk.control.system.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DistrictId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PinCodeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("BLOB");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("StateId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("isSuperAdmin")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PinCodeId");

                    b.HasIndex("StateId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("risk.control.system.Models.ClaimsInvestigation", b =>
                {
                    b.Property<string>("ClaimsInvestigationCaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("InvestigationCaseStatusId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LineOfBusinessId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("ClaimsInvestigationCaseId");

                    b.HasIndex("InvestigationCaseStatusId");

                    b.HasIndex("LineOfBusinessId");

                    b.ToTable("ClaimsInvestigation");
                });

            modelBuilder.Entity("risk.control.system.Models.ClientCompany", b =>
                {
                    b.Property<string>("ClientCompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Addressline")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DistrictId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PinCodeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("StateId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("ClientCompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("PinCodeId");

                    b.HasIndex("StateId");

                    b.ToTable("ClientCompany");
                });

            modelBuilder.Entity("risk.control.system.Models.Country", b =>
                {
                    b.Property<string>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("risk.control.system.Models.District", b =>
                {
                    b.Property<string>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StateId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("DistrictId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("risk.control.system.Models.InvestigationCase", b =>
                {
                    b.Property<string>("InvestigationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("InvestigationCaseStatusId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("InvestigationServiceTypeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LineOfBusinessId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("InvestigationId");

                    b.HasIndex("InvestigationCaseStatusId");

                    b.HasIndex("InvestigationServiceTypeId");

                    b.HasIndex("LineOfBusinessId");

                    b.ToTable("InvestigationCase");
                });

            modelBuilder.Entity("risk.control.system.Models.InvestigationCaseStatus", b =>
                {
                    b.Property<string>("InvestigationCaseStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("InvestigationCaseStatusId");

                    b.ToTable("InvestigationCaseStatus");
                });

            modelBuilder.Entity("risk.control.system.Models.InvestigationServiceType", b =>
                {
                    b.Property<string>("InvestigationServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimsInvestigationCaseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("LineOfBusinessId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("InvestigationServiceTypeId");

                    b.HasIndex("ClaimsInvestigationCaseId");

                    b.HasIndex("LineOfBusinessId");

                    b.ToTable("InvestigationServiceType");
                });

            modelBuilder.Entity("risk.control.system.Models.LineOfBusiness", b =>
                {
                    b.Property<string>("LineOfBusinessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("LineOfBusinessId");

                    b.ToTable("LineOfBusiness");
                });

            modelBuilder.Entity("risk.control.system.Models.PinCode", b =>
                {
                    b.Property<string>("PinCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("DistrictId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StateId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("PinCodeId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("StateId");

                    b.ToTable("PinCode");
                });

            modelBuilder.Entity("risk.control.system.Models.ServicedPinCode", b =>
                {
                    b.Property<string>("ServicedPinCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pincode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("VendorInvestigationServiceTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("ServicedPinCodeId");

                    b.HasIndex("VendorInvestigationServiceTypeId");

                    b.ToTable("ServicedPinCode");
                });

            modelBuilder.Entity("risk.control.system.Models.State", b =>
                {
                    b.Property<string>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("risk.control.system.Models.Vendor", b =>
                {
                    b.Property<string>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ActivatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Addressline")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AgreementDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeListedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DelistReason")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DistrictId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("DocumentImage")
                        .HasColumnType("BLOB");

                    b.Property<string>("DocumentUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IFSCCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PinCodeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("StateId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("VendorId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("PinCodeId");

                    b.HasIndex("StateId");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("risk.control.system.Models.VendorInvestigationServiceType", b =>
                {
                    b.Property<string>("VendorInvestigationServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvestigationServiceTypeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LineOfBusinessId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<string>("StateId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("VendorId")
                        .HasColumnType("TEXT");

                    b.HasKey("VendorInvestigationServiceTypeId");

                    b.HasIndex("InvestigationServiceTypeId");

                    b.HasIndex("LineOfBusinessId");

                    b.HasIndex("StateId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorInvestigationServiceType");
                });

            modelBuilder.Entity("risk.control.system.Models.ClientCompanyUser", b =>
                {
                    b.HasBaseType("risk.control.system.Models.ApplicationUser");

                    b.Property<string>("ClientCompanyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.HasIndex("ClientCompanyId");

                    b.HasDiscriminator().HasValue("ClientCompanyUser");
                });

            modelBuilder.Entity("risk.control.system.Models.VendorUser", b =>
                {
                    b.HasBaseType("risk.control.system.Models.ApplicationUser");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.Property<string>("VendorId")
                        .HasColumnType("TEXT");

                    b.HasIndex("VendorId");

                    b.ToTable("AspNetUsers", t =>
                        {
                            t.Property("Comments")
                                .HasColumnName("VendorUser_Comments");
                        });

                    b.HasDiscriminator().HasValue("VendorUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("risk.control.system.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("risk.control.system.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("risk.control.system.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("risk.control.system.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("risk.control.system.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("risk.control.system.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("risk.control.system.Models.ApplicationUser", b =>
                {
                    b.HasOne("risk.control.system.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("risk.control.system.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("risk.control.system.Models.PinCode", "PinCode")
                        .WithMany()
                        .HasForeignKey("PinCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("risk.control.system.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("PinCode");

                    b.Navigation("State");
                });

            modelBuilder.Entity("risk.control.system.Models.ClaimsInvestigation", b =>
                {
                    b.HasOne("risk.control.system.Models.InvestigationCaseStatus", "InvestigationCaseStatus")
                        .WithMany()
                        .HasForeignKey("InvestigationCaseStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("risk.control.system.Models.LineOfBusiness", "LineOfBusiness")
                        .WithMany()
                        .HasForeignKey("LineOfBusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvestigationCaseStatus");

                    b.Navigation("LineOfBusiness");
                });

            modelBuilder.Entity("risk.control.system.Models.ClientCompany", b =>
                {
                    b.HasOne("risk.control.system.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("risk.control.system.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("risk.control.system.Models.PinCode", "PinCode")
                        .WithMany()
                        .HasForeignKey("PinCodeId");

                    b.HasOne("risk.control.system.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("PinCode");

                    b.Navigation("State");
                });

            modelBuilder.Entity("risk.control.system.Models.District", b =>
                {
                    b.HasOne("risk.control.system.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("risk.control.system.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("risk.control.system.Models.InvestigationCase", b =>
                {
                    b.HasOne("risk.control.system.Models.InvestigationCaseStatus", "InvestigationCaseStatus")
                        .WithMany()
                        .HasForeignKey("InvestigationCaseStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("risk.control.system.Models.InvestigationServiceType", "InvestigationServiceType")
                        .WithMany()
                        .HasForeignKey("InvestigationServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("risk.control.system.Models.LineOfBusiness", "LineOfBusiness")
                        .WithMany()
                        .HasForeignKey("LineOfBusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvestigationCaseStatus");

                    b.Navigation("InvestigationServiceType");

                    b.Navigation("LineOfBusiness");
                });

            modelBuilder.Entity("risk.control.system.Models.InvestigationServiceType", b =>
                {
                    b.HasOne("risk.control.system.Models.ClaimsInvestigation", null)
                        .WithMany("InvestigationServiceTypes")
                        .HasForeignKey("ClaimsInvestigationCaseId");

                    b.HasOne("risk.control.system.Models.LineOfBusiness", "LineOfBusiness")
                        .WithMany("InvestigationServiceTypes")
                        .HasForeignKey("LineOfBusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LineOfBusiness");
                });

            modelBuilder.Entity("risk.control.system.Models.PinCode", b =>
                {
                    b.HasOne("risk.control.system.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("risk.control.system.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("risk.control.system.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("State");
                });

            modelBuilder.Entity("risk.control.system.Models.ServicedPinCode", b =>
                {
                    b.HasOne("risk.control.system.Models.VendorInvestigationServiceType", null)
                        .WithMany("PincodeServices")
                        .HasForeignKey("VendorInvestigationServiceTypeId");
                });

            modelBuilder.Entity("risk.control.system.Models.State", b =>
                {
                    b.HasOne("risk.control.system.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("risk.control.system.Models.Vendor", b =>
                {
                    b.HasOne("risk.control.system.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("risk.control.system.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("risk.control.system.Models.PinCode", "PinCode")
                        .WithMany()
                        .HasForeignKey("PinCodeId");

                    b.HasOne("risk.control.system.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("PinCode");

                    b.Navigation("State");
                });

            modelBuilder.Entity("risk.control.system.Models.VendorInvestigationServiceType", b =>
                {
                    b.HasOne("risk.control.system.Models.InvestigationServiceType", "InvestigationServiceType")
                        .WithMany()
                        .HasForeignKey("InvestigationServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("risk.control.system.Models.LineOfBusiness", "LineOfBusiness")
                        .WithMany()
                        .HasForeignKey("LineOfBusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("risk.control.system.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("risk.control.system.Models.Vendor", null)
                        .WithMany("VendorInvestigationServiceTypes")
                        .HasForeignKey("VendorId");

                    b.Navigation("InvestigationServiceType");

                    b.Navigation("LineOfBusiness");

                    b.Navigation("State");
                });

            modelBuilder.Entity("risk.control.system.Models.ClientCompanyUser", b =>
                {
                    b.HasOne("risk.control.system.Models.ClientCompany", "ClientCompany")
                        .WithMany()
                        .HasForeignKey("ClientCompanyId");

                    b.Navigation("ClientCompany");
                });

            modelBuilder.Entity("risk.control.system.Models.VendorUser", b =>
                {
                    b.HasOne("risk.control.system.Models.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("risk.control.system.Models.ClaimsInvestigation", b =>
                {
                    b.Navigation("InvestigationServiceTypes");
                });

            modelBuilder.Entity("risk.control.system.Models.LineOfBusiness", b =>
                {
                    b.Navigation("InvestigationServiceTypes");
                });

            modelBuilder.Entity("risk.control.system.Models.Vendor", b =>
                {
                    b.Navigation("VendorInvestigationServiceTypes");
                });

            modelBuilder.Entity("risk.control.system.Models.VendorInvestigationServiceType", b =>
                {
                    b.Navigation("PincodeServices");
                });
#pragma warning restore 612, 618
        }
    }
}
